# Copyright 2013, Qualcomm Innovation Center, Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
import os

Import('env')

if(not(env.has_key('GTEST_DIR'))):
    print('GTEST_DIR not specified skipping ajtcl unit test build')
else:
    gtest_env = env.Clone();
    gtest_dir = gtest_env['GTEST_DIR']
    vars = Variables();
    vars.AddVariables(('GTEST_HOME', '', gtest_dir))
    vars.Update(gtest_env)

    if gtest_dir == '/usr':
        gtest_src_base = os.path.join(gtest_dir, 'src', 'gtest')
    else:
        gtest_src_base = gtest_dir

    if(env['HOST'] == 'win32'):
        # gTest needs different CPPDEFINES as compared to AllJoyn TCL.
        gtest_env.Append(CPPDEFINES = ['WIN32', '_LIB'])
        gtest_env.Append(CXXFLAGS = ['/EHsc'])

    # Microsoft Visual Studio 2012 has a different _VARIADIC_MAX default value.
    # See: http://blogs.msdn.com/b/vcblog/archive/2011/09/12/10209291.aspx
    if(env['MSVC_VERSION'] == '11.0'):
        gtest_env.Append(CPPDEFINES = ['_VARIADIC_MAX=10'])
    # We compile with no rtti and no exceptions
    gtest_env.Append(CPPDEFINES = ['GTEST_HAS_RTTI=0'])
    gtest_env.Append(CPPDEFINES = ['GTEST_HAS_EXCEPTIONS=0'])
    # In case of thin client, we would also prefer not to use threads
    gtest_env.Append(CPPDEFINES = ['GTEST_HAS_PTHREAD=0'])
    # we replace AllJoyn's include CPPPATH options.
    gtest_env.Replace(CPPPATH = [ gtest_src_base ])
    if gtest_dir != '/usr':
        gtest_env.Append(CPPPATH = [ gtest_env.Dir('$GTEST_DIR/include') ])

    gtest_obj = gtest_env.StaticObject(target = 'gtest-all', source = [ '%s/src/gtest-all.cc' % gtest_src_base ])
    gtest_env.StaticLibrary(target = 'gtest', source = gtest_obj)

    test_src = env.Glob('*.cc')

    unittest_env = env.Clone()

    gtest_dir = unittest_env['GTEST_DIR']
    if gtest_dir != '/usr':
        unittest_env.Append(CPPPATH = [gtest_dir + '/include'])

    # The unit test code needs to find the AllJoyn Thin Client include files
    unittest_env.Append(CPPPATH = [env['includes']])

    if(env['HOST'] == 'win32'):
        unittest_env.Append(CXXFLAGS = ['/EHsc'])

    unittest_env.Append(CPPDEFINES = ['GTEST_HAS_RTTI=0'])
    unittest_env.Append(CPPDEFINES = ['GTEST_HAS_EXCEPTIONS=0'])
    unittest_env.Append(CPPDEFINES = ['GTEST_HAS_PTHREAD=0'])

    if(env['MSVC_VERSION'] == '11.0'):
        unittest_env.Append(CPPDEFINES = ['_VARIADIC_MAX=10'])

    if(env['HOST'] == 'linux'):
        unittest_env.Append(CXXFLAGS=['-Wall',
                                      '-pipe',
                                      '-funsigned-char',
                                      '-fno-strict-aliasing'])
        if unittest_env['VARIANT'] == 'debug':
            unittest_env.Append(CXXFLAGS='-g')

        #gtest library file is placed in the same directory
        unittest_env.Append(LIBPATH = ['./'])
        unittest_env.Prepend(LIBS = ['gtest'])
        unittest_env.Append(LIBS = ['rt', 'crypto'])

    objs = [ unittest_env.Object(test_src) ]

    unittest_prog = unittest_env.Program('ajtcltest', objs + unittest_env['aj_obj'])
